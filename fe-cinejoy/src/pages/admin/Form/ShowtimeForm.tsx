import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Modal, Form, Select, DatePicker, TimePicker, Button, Card } from 'antd';
import { PlusOutlined, DeleteOutlined } from '@ant-design/icons';
import { getMovies } from '@/apiservice/apiMovies';
import { getTheaters } from '@/apiservice/apiTheater';
import { createShowtime, updateShowtime } from '@/apiservice/apiShowTime';
import { getRegions } from '@/apiservice/apiRegion';
import { toast } from 'react-toastify';
import dayjs from 'dayjs';

interface ShowtimeFormProps {
    onCancel: () => void;
    onSuccess: () => void;
    editData?: IShowtime;
}

const ShowtimeForm: React.FC<ShowtimeFormProps> = ({ onCancel, onSuccess, editData }) => {
    const [movies, setMovies] = useState<IMovie[]>([]);
    const [regions, setRegions] = useState<IRegion[]>([]);
    const [allTheaters, setAllTheaters] = useState<ITheater[]>([]);
    const [filteredTheaters, setFilteredTheaters] = useState<ITheater[]>([]);
    const [selectedRegionId, setSelectedRegionId] = useState<string>('');
    const [form] = Form.useForm();

    useEffect(() => {
        const fetchData = async () => {
            try {
                const [moviesData, theatersData, regionsData] = await Promise.all([
                    getMovies(),
                    getTheaters(),
                    getRegions()
                ]);
                setMovies(Array.isArray(moviesData) ? moviesData : []);
                setAllTheaters(theatersData || []);
                setRegions(regionsData || []);
            } catch (error) {
                console.error('Error fetching data:', error);
                toast.error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu phim, r·∫°p v√† khu v·ª±c');
            }
        };
        fetchData();
    }, []);

    // Effect ƒë·ªÉ l·ªçc r·∫°p theo khu v·ª±c ƒë√£ ch·ªçn
    useEffect(() => {
        if (selectedRegionId) {
            // T√¨m t√™n khu v·ª±c t·ª´ ID
            const selectedRegion = regions.find(r => r._id === selectedRegionId);
            if (selectedRegion) {
                // L·ªçc r·∫°p theo location.city kh·ªõp v·ªõi t√™n khu v·ª±c
                const filtered = allTheaters.filter(theater => 
                    theater.location.city.toLowerCase().includes(selectedRegion.name.toLowerCase()) ||
                    selectedRegion.name.toLowerCase().includes(theater.location.city.toLowerCase())
                );
                setFilteredTheaters(filtered);
            }
        } else {
            setFilteredTheaters([]);
        }
        // Reset theater selection khi thay ƒë·ªïi khu v·ª±c
        form.setFieldValue('theaterId', undefined);
    }, [selectedRegionId, allTheaters, regions, form]);

    useEffect(() => {
        if (editData) {
            // T√¨m khu v·ª±c c·ªßa r·∫°p ƒë∆∞·ª£c ch·ªçn khi edit
            const selectedTheater = allTheaters.find(t => t._id === editData.theaterId._id);
            if (selectedTheater) {
                // T√¨m khu v·ª±c ph√π h·ª£p v·ªõi location.city c·ªßa r·∫°p
                const matchingRegion = regions.find(region => 
                    selectedTheater.location.city.toLowerCase().includes(region.name.toLowerCase()) ||
                    region.name.toLowerCase().includes(selectedTheater.location.city.toLowerCase())
                );
                if (matchingRegion) {
                    setSelectedRegionId(matchingRegion._id);
                }
            }
            
            form.setFieldsValue({
                movieId: editData.movieId._id,
                regionId: regions.find(region => 
                    selectedTheater?.location.city.toLowerCase().includes(region.name.toLowerCase()) ||
                    region.name.toLowerCase().includes(selectedTheater?.location.city.toLowerCase() || '')
                )?._id,
                theaterId: editData.theaterId._id,
                showDate: [
                    dayjs(editData.showDate.start),
                    dayjs(editData.showDate.end)
                ],
                showTimes: editData.showTimes.map(st => ({
                    date: dayjs(st.date),
                    timeRange: [dayjs(st.start), dayjs(st.end)],
                    room: st.room
                }))
            });
        } else {
            // Set default showtime when creating new
            form.setFieldsValue({
                showTimes: [{
                    date: undefined,
                    timeRange: undefined,
                    room: undefined
                }]
            });
        }
    }, [editData, form, allTheaters, regions]);

    // Handler cho vi·ªác ch·ªçn khu v·ª±c
    const handleRegionChange = (regionId: string) => {
        setSelectedRegionId(regionId);
    };

    const handleSubmit = async (values: {
        movieId: string;
        regionId: string;
        theaterId: string;
        showDate: [dayjs.Dayjs, dayjs.Dayjs];
        showTimes: Array<{
            date: dayjs.Dayjs;
            timeRange: [dayjs.Dayjs, dayjs.Dayjs];
            room: string;
        }>;
    }) => {
        try {
            // Create seats array for each showtime
            const defaultSeats = Array(16).fill(null).map((_, index) => ({
                seatId: `A${index + 1}`,
                status: 'available',
                type: 'normal',
                price: 75000
            }));

            const formattedData = {
                movieId: {
                    _id: values.movieId,
                    title: movies.find(m => m._id === values.movieId)?.title || ''
                },
                theaterId: {
                    _id: values.theaterId,
                    name: filteredTheaters.find(t => t._id === values.theaterId)?.name || ''
                },
                showDate: {
                    start: values.showDate[0].toISOString(),
                    end: values.showDate[1].toISOString()
                },
                showTimes: values.showTimes.map(st => ({
                    date: st.date.toISOString(),
                    start: st.timeRange[0].toISOString(),
                    end: st.timeRange[1].toISOString(),
                    room: st.room,
                    seats: defaultSeats
                }))
            };

            if (editData) {
                await updateShowtime(editData._id, formattedData as Partial<IShowtime>);
                toast.success('C·∫≠p nh·∫≠t su·∫•t chi·∫øu th√†nh c√¥ng!');
            } else {
                await createShowtime(formattedData as Partial<IShowtime>);
                toast.success('Th√™m su·∫•t chi·∫øu th√†nh c√¥ng!');
            }
            onSuccess();
        } catch (error) {
            console.error('Error saving showtime:', error);
            toast.error(editData ? 'C·∫≠p nh·∫≠t su·∫•t chi·∫øu th·∫•t b·∫°i!' : 'Th√™m su·∫•t chi·∫øu th·∫•t b·∫°i!');
        }
    };

    const validateShowDate = (current: dayjs.Dayjs) => {
        return current && current < dayjs().startOf('day');
    };

    const validateShowTimeDate = (_: unknown, value: dayjs.Dayjs) => {
        const showDateRange = form.getFieldValue('showDate');
        if (!value || !showDateRange) {
            return Promise.resolve();
        }
        
        const [startDate, endDate] = showDateRange;
        if (value.isBefore(startDate, 'day') || value.isAfter(endDate, 'day')) {
            return Promise.reject(new Error('Ng√†y chi·∫øu ph·∫£i n·∫±m trong kho·∫£ng th·ªùi gian chi·∫øu!'));
        }
        return Promise.resolve();
    };

    const validateTimeRange = (_: unknown, value: [dayjs.Dayjs, dayjs.Dayjs]) => {
        if (!value || !value[0] || !value[1]) {
            return Promise.resolve();
        }
        
        if (value[1].isSameOrBefore(value[0])) {
            return Promise.reject(new Error('Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu!'));
        }
        
        const duration = value[1].diff(value[0], 'minutes');
        if (duration < 30) {
            return Promise.reject(new Error('Th·ªùi l∆∞·ª£ng chi·∫øu ph·∫£i √≠t nh·∫•t 30 ph√∫t!'));
        }
        
        return Promise.resolve();
    };

    return (
        <Modal
            open
            title={<div className="text-center text-xl font-semibold">{editData ? 'S·ª≠a su·∫•t chi·∫øu' : 'Th√™m su·∫•t chi·∫øu m·ªõi'}</div>}
            onCancel={onCancel}
            footer={null}
            width={900}
            centered
            destroyOnClose
        >
            <Form
                form={form}
                layout="vertical"
                onFinish={handleSubmit}
                autoComplete="off"
            >
                <div className="grid grid-cols-3 gap-4 mb-6">
                    <Form.Item
                        name="movieId"
                        label="üé¨ Phim"
                        rules={[
                            { required: true, message: 'Vui l√≤ng ch·ªçn phim!' }
                        ]}
                    >
                        <Select
                            placeholder="Ch·ªçn phim"
                            size="large"
                            showSearch
                            optionFilterProp="children"
                            filterOption={(input, option) =>
                                (option?.label ?? '').toLowerCase().includes(input.toLowerCase())
                            }
                            options={movies.map(movie => ({ 
                                value: movie._id, 
                                label: movie.title 
                            }))}
                        />
                    </Form.Item>

                    <Form.Item
                        name="regionId"
                        label="üåç Khu v·ª±c"
                        rules={[
                            { required: true, message: 'Vui l√≤ng ch·ªçn khu v·ª±c!' }
                        ]}
                    >
                        <Select
                            placeholder="Ch·ªçn khu v·ª±c"
                            size="large"
                            showSearch
                            optionFilterProp="children"
                            filterOption={(input, option) =>
                                (option?.label ?? '').toLowerCase().includes(input.toLowerCase())
                            }
                            onChange={handleRegionChange}
                            options={regions.map(region => ({ 
                                value: region._id, 
                                label: region.name 
                            }))}
                        />
                    </Form.Item>

                    <Form.Item
                        name="theaterId"
                        label="üè¢ R·∫°p chi·∫øu"
                        rules={[
                            { required: true, message: 'Vui l√≤ng ch·ªçn r·∫°p chi·∫øu!' }
                        ]}
                    >
                        <Select
                            placeholder={selectedRegionId ? "Ch·ªçn r·∫°p chi·∫øu" : "Ch·ªçn khu v·ª±c tr∆∞·ªõc"}
                            size="large"
                            showSearch
                            optionFilterProp="children"
                            filterOption={(input, option) =>
                                (option?.label ?? '').toLowerCase().includes(input.toLowerCase())
                            }
                            disabled={!selectedRegionId}
                            options={filteredTheaters.map(theater => ({ 
                                value: theater._id, 
                                label: theater.name 
                            }))}
                            notFoundContent={selectedRegionId ? "Kh√¥ng c√≥ r·∫°p n√†o trong khu v·ª±c n√†y" : "Vui l√≤ng ch·ªçn khu v·ª±c tr∆∞·ªõc"}
                        />
                    </Form.Item>
                </div>

                <Form.Item
                    name="showDate"
                    label="Th·ªùi gian chi·∫øu (t·ª´ ng√†y - ƒë·∫øn ng√†y)"
                    rules={[
                        { required: true, message: 'Vui l√≤ng ch·ªçn th·ªùi gian chi·∫øu!' }
                    ]}
                >
                    <DatePicker.RangePicker
                        placeholder={['Ng√†y b·∫Øt ƒë·∫ßu', 'Ng√†y k·∫øt th√∫c']}
                        size="large"
                        style={{ width: '100%' }}
                        format="DD/MM/YYYY"
                        disabledDate={validateShowDate}
                    />
                </Form.Item>

                <div className="mb-6">
                    <h4 className="text-lg font-medium mb-4">Danh s√°ch su·∫•t chi·∫øu</h4>
                    <Form.List
                        name="showTimes"
                        rules={[
                            {
                                validator: async (_, showTimes) => {
                                    if (!showTimes || showTimes.length < 1) {
                                        return Promise.reject(new Error('Ph·∫£i c√≥ √≠t nh·∫•t 1 su·∫•t chi·∫øu!'));
                                    }
                                },
                            },
                        ]}
                    >
                        {(fields, { add, remove }, { errors }) => (
                            <>
                                {fields.map(({ key, name, ...restField }, index) => (
                                    <div key={key} className="mb-3">
                                        <Card
                                            size="small"
                                            title={`Su·∫•t chi·∫øu ${index + 1}`}
                                            extra={
                                                fields.length > 1 ? (
                                                    <Button
                                                        type="text"
                                                        danger
                                                        icon={<DeleteOutlined />}
                                                        onClick={() => remove(name)}
                                                    >
                                                        X√≥a
                                                    </Button>
                                                ) : null
                                            }
                                        >
                                            <div className="grid grid-cols-3 gap-4">
                                                <Form.Item
                                                    {...restField}
                                                    name={[name, 'date']}
                                                    label="Ng√†y chi·∫øu"
                                                    rules={[
                                                        { required: true, message: 'Vui l√≤ng ch·ªçn ng√†y chi·∫øu!' },
                                                        { validator: validateShowTimeDate }
                                                    ]}
                                                >
                                                    <DatePicker
                                                        placeholder="Ch·ªçn ng√†y chi·∫øu"
                                                        size="large"
                                                        style={{ width: '100%' }}
                                                        format="DD/MM/YYYY"
                                                        disabledDate={validateShowDate}
                                                    />
                                                </Form.Item>
    
                                                <Form.Item
                                                    {...restField}
                                                    name={[name, 'timeRange']}
                                                    label="Th·ªùi gian chi·∫øu"
                                                    rules={[
                                                        { required: true, message: 'Vui l√≤ng ch·ªçn th·ªùi gian chi·∫øu!' },
                                                        { validator: validateTimeRange }
                                                    ]}
                                                >
                                                    <TimePicker.RangePicker
                                                        placeholder={['Gi·ªù b·∫Øt ƒë·∫ßu', 'Gi·ªù k·∫øt th√∫c']}
                                                        size="large"
                                                        style={{ width: '100%' }}
                                                        format="HH:mm"
                                                        minuteStep={15}
                                                    />
                                                </Form.Item>
    
                                                <Form.Item
                                                    {...restField}
                                                    name={[name, 'room']}
                                                    label="Ph√≤ng chi·∫øu"
                                                    rules={[
                                                        { required: true, message: 'Vui l√≤ng ch·ªçn ph√≤ng chi·∫øu!' }
                                                    ]}
                                                >
                                                    <Select
                                                        placeholder="Ch·ªçn ph√≤ng chi·∫øu"
                                                        size="large"
                                                        allowClear
                                                        showSearch={false}
                                                        options={[
                                                            { value: 'Room 1', label: 'üé¨ Room 1' },
                                                            { value: 'Room 2', label: 'üé¨ Room 2' },
                                                            { value: 'Room 3', label: 'üé¨ Room 3' },
                                                            { value: 'Room 4', label: 'üé¨ Room 4' },
                                                            { value: 'Room 5', label: 'üé¨ Room 5' }
                                                        ]}
                                                    />
                                                </Form.Item>
                                            </div>
                                        </Card>
                                    </div>
                                ))}
                                
                                <Form.Item className="mt-4">
                                    <Button
                                        type="dashed"
                                        onClick={() => add()}
                                        block
                                        icon={<PlusOutlined />}
                                        size="large"
                                    >
                                        Th√™m su·∫•t chi·∫øu
                                    </Button>
                                    <Form.ErrorList errors={errors} />
                                </Form.Item>
                            </>
                        )}
                    </Form.List>
                </div>

                <div className="flex justify-end gap-4 mt-6">
                    <motion.button
                        type="button"
                        onClick={onCancel}
                        className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 cursor-pointer"
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                    >
                        H·ªßy
                    </motion.button>
                    <motion.button
                        type="submit"
                        className="px-4 py-2 bg-black text-white rounded hover:bg-gray-800 cursor-pointer"
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                    >
                        {editData ? 'C·∫≠p nh·∫≠t' : 'Th√™m su·∫•t chi·∫øu'}
                    </motion.button>
                </div>
            </Form>
        </Modal>
    );
};

export default ShowtimeForm;